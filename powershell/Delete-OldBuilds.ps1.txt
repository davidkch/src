<#  
.SYNOPSIS  
 This script is for deleting old builds (more than 10 days old) in the release or TeamBuild folder 

.DESCRIPTION  
 This script is for deleting old builds (more than 10 days old) in the release or TeamBuild folder 
 it expecting release\<branch>\<project>\<build> folder structure
 log file will create in release folder

.EXAMPLE  
.\Delete-OldBuilds.ps1 e:\release
.\Delete-OldBuilds.ps1 d:\TeamBuild

#>  

param(
    ## parent folder to delete
    [Parameter(Mandatory = $true)]
    $releaseFolder
)

#$releaseFolder = "D:\Release"

$timestamp = Get-Date -Format o | foreach {$_ -replace ":", "."}
$tempstamp = Get-Random

$LogFile ="$releaseFolder\deleteLog_$timestamp.txt"
Write-Output $null | Out-File -Encoding utf8 $LogFile

$tempFolder = "$env:TEMP\DeleteTemp_$tempstamp"

$retry = 10

Function Delete-OldBuilds
{
    try
    {
        Set-Location $releaseFolder

        New-Item -Path $tempFolder -Type Directory

        $projectFolders = Get-ChildItem $releaseFolder -Directory
        $branchFolders = Get-ChildItem $projectFolders.FullName -Directory
        $buildFolders = Get-ChildItem $branchFolders.FullName -Directory

        # remove old log file
        if (Test-Path $releaseFolder\deleteLog_*.txt -PathType Leaf)
        {
            Remove-Item  $releaseFolder\deleteLog_*.txt -Force
        }
        
        foreach ($build in $buildFolders)
        {
            $howOld = ((Get-Date) - $build.CreationTime).Days
            if ($howOld -gt 10 -and $build.PsISContainer -eq $True)
            {
                $openFiles = net file | Select-String -SimpleMatch $build.BaseName

                if ($openFiles -ne $null)
                {
                    CloseOpenFiles $build.BaseName

                    for ($i = 1; $i -le $retry -and (Test-Path -Path $build.FullName -ErrorAction SilentlyContinue); $i++) 
                    {
                        Write-Host "Attempting to remove folder " $build.FullName " ($i of $retry)" 
                        robocopy $tempFolder $build.FullName /MIR /R:10 /LOG+:$LogFile 
                        Remove-Item -Path $build.FullName -Recurse -Force -ErrorAction SilentlyContinue
                        Start-Sleep -Milliseconds 1000 
                        CloseOpenFiles $build.BaseName
                    } 

                }
                else
                {
                    $build.FullName
                    robocopy $tempFolder $build.FullName /MIR /R:10 /LOG+:$LogFile 
                    Remove-Item $build.FullName -Recurse -Force -ErrorAction SilentlyContinue

                }
            }        
        }

        Remove-Item $tempFolder -Force
       
    }
    catch
    {
        write-host $_.exception.message
        Write-Output $_.exception.message | Out-File -Encoding utf8 -Append $LogFile
    }

}

Function CloseOpenFiles
{
    param(
        ## search pattern for folder
        [Parameter(Mandatory = $true)]
        $openBuild
    )

    $openFiles = net file | Select-String -SimpleMatch $openBuild

    foreach ($openFile in $openFiles)
    {
        Write-Host "open file(s) $openFile"
                    
        #Get id
        $id = $openFile.Line.Split(" ")[0]
                    
        #Close file
        Write-Host "closing file handle $id"
        net file $id /close

    }

}

Delete-OldBuilds $releaseFolder
