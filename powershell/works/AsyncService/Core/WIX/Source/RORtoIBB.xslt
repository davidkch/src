<?xml version="1.0" encoding="utf-8"?>
<!--
<copyright file="RORtoIBB.xslt" company="Microsoft">
Copyright (c) Microsoft Corporation.  All rights reserved.
summary: This XSL transformation is for the Return Order data that Async Service receives
:::::::: so that the transformed XML is in a format eligible to be sent to IBB
Author: vaishb
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:poeds="http://MS.IT.POEDS.Contracts/2009/06"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt"
    exclude-result-prefixes="msxsl poeds">
  <xsl:output method="xml" encoding="UTF-16" indent="yes"/>
  <xsl:template match="poeds:MessageData/poeds:Request/poeds:ReturnOrderResponse">
    <ns0:ReturnPurchaseOrder LanguageCode="en-US" xmlns:ns0="http://MS.IT.Fulfillment.IBB.BODEnvelope/1/MS.IT.Fulfillment.PurchaseOrderReturn/1">
      <ApplicationArea>
        <Sender>
          <PublisherID>MS.IT.Fulfillment.POEDS</PublisherID>
          <InstanceID>
            <xsl:value-of select="poeds:Lines/poeds:OrderLine[1]/@FulfillmentRegionCode"/>
          </InstanceID>
          <ComponentID></ComponentID>
          <TaskID></TaskID>
          <ReferenceID></ReferenceID>
          <ConfirmationCode></ConfirmationCode>
        </Sender>
        <CreationDateTime>
          <!--This is generated by Async, in UTC. eg- 2009-10-06 11:30:45-->
          <xsl:value-of select="../../poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='CreationDateTime']/@Value"/>
        </CreationDateTime>
        <BODID>
          <xsl:value-of select="../../@ContextId"/>
        </BODID>
        <UserArea />
      </ApplicationArea>
      <DataArea>
        <PurchaseOrder>
          <MSPurchaseOrderID>
            <xsl:value-of select="@MSPurchaseOrderId"/>
          </MSPurchaseOrderID>
          <ExternalOrderNumber>
            <xsl:value-of select="@ExternalOrderNumber"/>
          </ExternalOrderNumber>
          <DocumentDateTime>
            <xsl:value-of select="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='DocumentDateTime']/@Value"/>
          </DocumentDateTime>
          <OrderValue>
            <xsl:value-of select="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='ReturnOrderValue']/@Value"/>
          </OrderValue>
          <MSSalesOrderID>
            <xsl:value-of select="@SalesOrderNumber"/>
          </MSSalesOrderID>
          <EndCustomerParty>
            <BillToCountry>
              <xsl:value-of select="@ISOCountryCode"/>
            </BillToCountry>
            <SourceCurrencyCode>
              <xsl:value-of select="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='SourceCurrencyCode']/@Value"/>
            </SourceCurrencyCode>
          </EndCustomerParty>
          <SoldToBuyerParty>
            <CustomerID>
              <xsl:value-of select="@DdspId"/>
            </CustomerID>
            <PriceListID>
              <xsl:value-of select="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='PriceListId']/@Value"/>
            </PriceListID>
            <StoreID>
              <xsl:value-of select="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='StoreId']/@Value"/>
            </StoreID>    
          </SoldToBuyerParty>
          <!-- Start of Order Lines -->
          <xsl:for-each select="poeds:Lines/poeds:OrderLine">
            <OrderLine>
              <LineNumber>
                <xsl:value-of select="@OrderLineID"/>
              </LineNumber>
              <MSSalesOrderLineNumber>
                <xsl:value-of select="@SalesOrderLineNumber"/>
              </MSSalesOrderLineNumber>
              <Quantity>
                <xsl:value-of select="@Quantity"/>
              </Quantity>
              <ProductOfferID>
                <xsl:value-of select="@ProductOfferId"/>
              </ProductOfferID>
              <xsl:if test="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='SecondaryLicenseTypeCode']/@Value !=''">
                <SecondaryLicenseTypeCode>
                  <xsl:value-of select="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='SecondaryLicenseTypeCode']/@Value"/>
                </SecondaryLicenseTypeCode>
              </xsl:if>

              <!--Required by SAP for return order processing-->
              <EndCustomerPartyPrice>
                <UnitValue>
                  <xsl:value-of select="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='UnitValue']/@Value"/>
                </UnitValue>
                
                <!--Ensure that SAP is not using this value-->
                <TotalLineItemValue>
                  <xsl:value-of select="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='TotalLineItemValue']/@Value"/>
                </TotalLineItemValue>
              </EndCustomerPartyPrice>
              <!-- Order Line Item -->
              <xsl:for-each select="poeds:LineItems/poeds:OrderLineItem">
                <Fulfillment>
                  <xsl:attribute name="ID">
                    <xsl:value-of select="@OrderLineItemID"/>
                  </xsl:attribute>
                  <xsl:for-each select="poeds:Parts/poeds:POEBase">
                    <Part>
                      <xsl:attribute name="PartNumber">
                        <xsl:value-of select="@PartNumber"/>
                      </xsl:attribute>
                      <xsl:attribute name="RegionCode">
                        <xsl:value-of select="@RegionID"/>
                      </xsl:attribute>
                      <Identifier Type="GroupID">
                        <xsl:value-of select="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='GroupID']/@Value"/>
                      </Identifier>
                      <!--Code to get ChhannelID and SequenceNumber from UniqueNumber-->
                      <xsl:variable name="uniqueNumber" select="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='UniqueNumber']/@Value" />
                      <xsl:variable name="sequencelNumberLength" select="6" />
                      <xsl:variable name="channelIDLength" select="string-length($uniqueNumber) - $sequencelNumberLength" />
                      <xsl:choose>
                        <!--no string manipulation, if the channel length is <=0-->
                        <xsl:when test="($channelIDLength &lt;= 0)">
                          <Identifier Type="ChannelID">0</Identifier>
                          <Identifier Type="SequenceNumber">
                            <xsl:value-of select="$uniqueNumber" />
                          </Identifier>
                        </xsl:when>
                        <xsl:otherwise>
                          <!--xslt string index starts with 1-->
                          <Identifier Type="ChannelID">
                            <xsl:value-of select="substring($uniqueNumber, 1, $channelIDLength)" />
                          </Identifier>
                          <Identifier Type="SequenceNumber">
                            <xsl:value-of select="substring($uniqueNumber, $channelIDLength + 1)" />
                          </Identifier>
                        </xsl:otherwise>
                      </xsl:choose>
                      <!--code if serial number can be passed to ibb. NOTE: This may need change to canonical schema and changes to IBB (doing parsing)-->
                      <!--
                      <Identifier Type="UniqueNumber">
                        <xsl:value-of select="poeds:PropertyBagItems/poeds:PropertyBagItem[@Key='UniqueNumber']/@Value"/>
                      </Identifier>
                      -->
                    </Part>
                  </xsl:for-each>
                </Fulfillment>
              </xsl:for-each>
            </OrderLine>
          </xsl:for-each>
        </PurchaseOrder>
      </DataArea>
    </ns0:ReturnPurchaseOrder>
  </xsl:template>
</xsl:stylesheet>
